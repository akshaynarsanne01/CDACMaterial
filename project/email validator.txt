package com.example;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class EmailValidator {

    private static final String EMAIL_REGEX =
            "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@" +
            "(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";

    private static final Pattern pattern = Pattern.compile(EMAIL_REGEX);

    public static boolean isValidEmail(String email) {
        Matcher matcher = pattern.matcher(email);
        return matcher.matches();
    }
}


import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class PhoneNumberValidator {

    private static final String PHONE_REGEX =
            "^(\\+[0-9]{1,3})?[0-9]{10}$";

    private static final Pattern pattern = Pattern.compile(PHONE_REGEX);

    public static boolean isValidPhoneNumber(String phoneNumber) {
        Matcher matcher = pattern.matcher(phoneNumber);
        return matcher.matches();
    }

    public static void main(String[] args) {
        String[] phoneNumbers = {
                "1234567890",        // Valid: 10 digits, no country code
                "+1234567890",       // Valid: 10 digits with country code
                "+1 234 567 890",    // Valid: 10 digits with country code and spaces
                "+91 1234567890",    // Valid: 10 digits with country code
                "+1234567890123",    // Invalid: more than 13 digits
                "+12345",            // Invalid: less than 10 digits
                "+123456789012345",  // Invalid: more than 13 digits with country code
                "+1234567890a"       // Invalid: contains non-numeric characters
        };

        for (String phoneNumber : phoneNumbers) {
            System.out.println(phoneNumber + " : " + isValidPhoneNumber(phoneNumber));
        }
    }
}
